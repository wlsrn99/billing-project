name: CI

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  setup:
    runs-on: ubuntu-latest
    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up MySQL container
        run: |
          docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} -p 3305:3306 mysql:8.0
      - name: Wait for MySQL to be healthy
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..12}; do
            if docker exec mysql-container mysql -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SELECT 1"; then
              echo "MySQL is up - executing command"
              break
            fi
            echo "MySQL is unavailable - sleeping"
            sleep 5
          done
          if [ $i -eq 12 ]; then
            echo "MySQL failed to start"
            exit 1
          fi
      - name: Set root user privileges
        run: |
          docker exec mysql-container mysql -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "ALTER USER 'root'@'%' IDENTIFIED BY '${{ secrets.MYSQL_ROOT_PASSWORD }}'; FLUSH PRIVILEGES;"
      - name: Test MySQL connection
        run: docker exec mysql-container mysql -uroot -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SHOW DATABASES;"

  build_and_test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [module-user, module-streaming]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create module-specific application.yml
        run: |
          mkdir -p ${{ matrix.module }}/src/main/resources
          mkdir -p ${{ matrix.module }}/src/test/resources
          if [ "${{ matrix.module }}" = "module-user" ]; then
            echo "${{ secrets.MODULE_USER_APPLICATION_YML }}" | base64 --decode > ${{ matrix.module }}/src/main/resources/application.yml
            echo "${{ secrets.MODULE_USER_TEST_YML }}" | base64 --decode > ${{ matrix.module }}/src/test/resources/application.yml
            echo "User module application.yml:"
            cat ${{ matrix.module }}/src/main/resources/application.yml
            echo "User module test application.yml:"
            cat ${{ matrix.module }}/src/test/resources/application.yml
          elif [ "${{ matrix.module }}" = "module-streaming" ]; then
            echo "${{ secrets.MODULE_STREAMING_APPLICATION_YML }}" | base64 --decode > ${{ matrix.module }}/src/main/resources/application.yml
            echo "${{ secrets.MODULE_STREAMING_TEST_YML }}" | base64 --decode > ${{ matrix.module }}/src/test/resources/application.yml
            echo "Streaming module application.yml:"
            cat ${{ matrix.module }}/src/main/resources/application.yml
            echo "Streaming module test application.yml:"
            cat ${{ matrix.module }}/src/test/resources/application.yml
          else
            echo "Unknown module: ${{ matrix.module }}"
            exit 1
          fi

#      - name: Install yamllint
#        run: |
#          if ! command -v yamllint &> /dev/null; then
#            sudo apt-get install -y yamllint
#          fi
#
#      - name: Verify decoded files with yamllint
#        run: |
#          yamllint ${{ matrix.module }}/src/main/resources/application.yml
#          yamllint ${{ matrix.module }}/src/test/resources/application.yml
      - name: Build and test ${{ matrix.module }}
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container:3306/billing
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: ./gradlew :${{ matrix.module }}:build --warning-mode all

      - name: Run tests
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container:3306/billing
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: ./gradlew :${{ matrix.module }}:test --warning-mode all

      - name: Print application logs
        if: always()
        run: |
          echo "Logs for ${{ matrix.module }}"
          if [ -f ${{ matrix.module }}/build/reports/tests/test/index.html ]; then
            cat ${{ matrix.module }}/build/reports/tests/test/index.html
          fi
          if [ -d ${{ matrix.module }}/build/reports/tests ]; then
            find ${{ matrix.module }}/build/reports/tests -type f -name "*.log" -exec cat {} +
          fi
          if [ -d ${{ matrix.module }}/build/test-results ]; then
            find ${{ matrix.module }}/build/test-results -type f -name "*.xml" -exec cat {} +
          fi